<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:view="com.antistatus.whatchado.view.*"
		 xmlns:component="com.antistatus.whatchado.view.component.*"
		 width="100%" height="100%">

	<fx:Declarations>
		<s:Power id="powerEasing" exponent="4"/>
		<s:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="2000"/>
		<s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="2000"/>
		<s:Resize id="growBig" heightFrom="0" widthFrom="0"/>
		<s:Move id="slideIn" xFrom="-1200" xTo="0" duration="4000"/>
		<s:Move id="slideOut" xTo="-1200" xFrom="0" duration="4000"/>
		<s:Sequence id="delayedFadeIn" >
			<s:Pause duration="1000"/>
			<s:Fade alphaFrom="0" alphaTo="1" duration="1000" effectStart="{introView.visible = true;}"/>
		</s:Sequence>
		<s:Sequence id="delayedfadeOut" >
			<s:Pause duration="100"/>
			<s:Fade alphaFrom="1" alphaTo="0" duration="1000"/>
		</s:Sequence>
		<s:Sequence id="delayedMoveInTop">
			<s:Pause duration="2000"/>
			<s:Move yFrom="-200" yTo="0" duration="1000"/>
		</s:Sequence>
		<s:Sequence id="delayedMoveInBottom" >
			<s:Pause duration="2000"/>
			<s:Move yFrom="{this.height+200}" duration="1000"/>
		</s:Sequence>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.antistatus.whatchado.event.ViewEvent;
			import com.antistatus.whatchado.model.vo.ErrorVO;
			import com.antistatus.whatchado.utilities.Trace;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;

			
			[Bindable]
			public var settingsVisible:Boolean = false;

			[Bindable]
			public var menuButtonsDataProvider:ArrayCollection;
			[Bindable]
			public var questionsButtonsDataProvider:ArrayCollection;


			public function endFullScreen():void
			{
				try
				{
					stage.displayState = StageDisplayState.NORMAL;
				}
				catch (any:*)
				{
					// ignore
				}
			}

			public function fullScreenHandler(event:FullScreenEvent):void
			{
				stage.removeEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);

				if (stage.displayState == StageDisplayState.NORMAL)
					dispatchEvent(new ViewEvent(ViewEvent.EXIT));
			}

			public function openJumpUrl(frogJumpRequest:URLRequest):void
			{
				navigateToURL(frogJumpRequest, "_self");
			}

			public function showErrorMessage(error:ErrorVO):void
			{
				Alert.show(error.content, error.label);
			}

			public function startDisplay():void
			{
				currentState = "display";
			}

			public function startFullScreen():void
			{
				try
				{
					stage.displayState = StageDisplayState.FULL_SCREEN;
					stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				}
				catch (any:*)
				{
					// ignore
					Trace.log(this, "Error: " + any + " - " + stage.displayState);
				}
			}
			
			protected function loggerButtonClickHandler(event:MouseEvent):void
			{
				new LoggerWindow().open();
			}
			
			protected function startQuestionsClickHandler(event:MouseEvent):void
			{
				dispatchEvent(new ViewEvent(ViewEvent.START));
			}
			protected function nextQuestionsClickHandler(event:MouseEvent):void
			{
				dispatchEvent(new ViewEvent(ViewEvent.CONTINUE));
			}
			
			protected function fullScreenClickHandler(event:MouseEvent):void
			{
				if(fullScreenButton.label == "fullscreen")
				{
					startFullScreen();
					fullScreenButton.label = "end fullscreen";
				}
				else
				{
					endFullScreen();
					fullScreenButton.label = "fullscreen";
				}	
			}
			
			protected function testStateExitStateHandler(event:FlexEvent):void
			{
				settingsView.stop();
				dispatchEvent(new ViewEvent(ViewEvent.SETTINGS_SUBMIT));
			}
			
			
		]]>
	</fx:Script>
	
	
	<s:states>
		<s:State name="start"/>
		<s:State name="intro" enterState="{topBarGroup.visible = true; bottomBarGroup.visible = true;}" exitState="{introView.visible = false;}"/>
		<s:State name="test" exitState="testStateExitStateHandler(event)"/>
		<s:State name="tour"/>
		<s:State name="login"/>
		<s:State name="fullscreen"/>
		<s:State name="video"/>
		<s:State name="question"/>
		<s:State name="upload"/>

	</s:states>

	<s:Group id="introView" includeIn="intro" left="0" right="0" top="92" bottom="66" addedEffect="{delayedFadeIn}" visible="false">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Rect>
		<s:Scroller width="100%" height="100%" verticalScrollPolicy="on">
			<s:Group>
				<s:RichText id="introText" left="20" right="20"/>
			</s:Group>			
		</s:Scroller>
	</s:Group>
	<s:Group id="topBarGroup" showEffect="{delayedMoveInTop}" width="100%" height="100" x="0" visible="false" excludeFrom="start">
		<s:BitmapImage excludeFrom="start" top="40" height="83" horizontalCenter="0"
				   source="@Embed(source='../assets/skin/top_shadow.png')" />
		<s:BitmapImage id="topBar" excludeFrom="start" left="0" right="0" height="92" fillMode="repeat"
				   source="@Embed(source='../assets/skin/bg_top.png')"/>
		<s:BitmapImage top="13" horizontalCenter="0" width="285" height="39"
					   source="@Embed(source='../assets/skin/diy_logo.png')"/>
		<component:MainNavigation id="navigation" excludeFrom="start" y="0" left="0" right="0" 
							  height="100" menuDataProvider="{menuButtonsDataProvider}" questionsDataProvider="{questionsButtonsDataProvider}"/>
	</s:Group>
	<s:Group id="bottomBarGroup" showEffect="{delayedMoveInBottom}" width="100%" height="66" bottom="0" excludeFrom="start" visible="false">
		<s:BitmapImage id="botBar" excludeFrom="start" left="0" right="0" height="88" fillMode="repeat"
				   source="@Embed(source='../assets/skin/bg_bottom.png')"/>
	</s:Group>

	<s:HGroup horizontalCenter="0" bottom="0" gap="10">
		<s:Button label="Start Interview" click="startQuestionsClickHandler(event)"/>
		<s:Button label="Question Finish" click="nextQuestionsClickHandler(event)" includeIn="question"/>
	</s:HGroup>
		
	
	
	
	<component:QuestionView includeIn="question" width="100%" height="100%"/>
	<view:UserProfileView/>

	<component:SettingsView id="settingsView" includeIn="test" x="0" verticalCenter="0" width="100%"/>
	<s:Button right="0" id="loggerButton" label="logger" click="loggerButtonClickHandler(event)" bottom="0"/>
	<s:Button right="0" id="fullScreenButton" label="fullscreen" click="fullScreenClickHandler(event)" top="0"/>
</s:Group>
